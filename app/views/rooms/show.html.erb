
<!DOCTYPE html>
<html>
  <body>
  <h2>Play the music</h2>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
  <div class="container">
    <div class="row">
      <div class="col-xs-12 col-md-4">
        <div class="body_show">
          <div class="box_video" style="background-image: linear-gradient(-225deg, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0.2) 50%), url('https://slack-imgs.com//mc?c=1&url=https%3A%2F%2Fscontent-iad3-1.cdninstagram.com%2Ft51.2885-15%2Fe35%2F20589379_2000039293551612_5999224329236119552_n.jpg'); height: '400', width: '370'; background-size: cover; background-position: center">
          </div>



          <div class="col-xs-12 col-md-4">
            <div class="player_audio">
              <i class="fa fa-play-circle button_player" aria-hidden="true"></i>
              <i class="fa fa-pause-circle-o button_player " aria-hidden="true"></i>
              <input type="range" id="progress-bar" value="0">
            </div>
          </div>
          <div id="player">


            <script>



      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');
      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '360',
          width: '640',
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

    //Nos vid√©os
      var videos =[];
      <% @tracks.each do |track|  %>
      videos.push('<%="#{track.youtubeid}"%>');
      <% end %>
      var index = 0;

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.cueVideoById({
        videoId: videos[index],

        });
        event.target.playVideo();
        if (index == 0){
          index++;
        }
        updateProgressBar();
        time_update_interval = setInterval( function (){
          updateProgressBar();
        }, 1000)
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      ;
      function onPlayerStateChange(event) {
        if (event.data === YT.PlayerState.ENDED) {
          console.log(index);
          if (index <= videos.length - 1) {

            event.target.loadVideoById({
              videoId: videos[index],
            });
            index++;
          }
        }
      }
      // 1. Code Roselyne
      const play = document.querySelector(".fa-play-circle");
      const pause = document.querySelector(".fa-pause-circle-o");
      const progress = document.querySelector("#progress-bar");
      function playMusic (){
        player.playVideo();
      };
     function pauseMusic (){
        player.pauseVideo();
      };
      function progressMusic(e){
        console.log("hehe");
        const newTime = player.getDuration() * (e.target.value / 100);
        player.seekTo(newTime);
      };
      function updateProgressBar(){
        progress.val((player.getCurrentTime() / player.getDuration()) * 100);
        console.log("coucou");
      }

      play.addEventListener("click", playMusic);
      pause.addEventListener("click", pauseMusic);
      progress.addEventListener("mouseup touchend", progressMusic);

    </script>



          </div>
        </div>
      </div>
    </div>

  </body>
</html>
