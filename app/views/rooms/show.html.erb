
<!DOCTYPE html>
<html>
  <body>
  <h1>THIS IS THE PLAYER</h1>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>


    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

       // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.

      var player;
      function onYouTubeIframeAPIReady() {
        player_1 = new YT.Player('player', {
          height: '360',
          width: '640',
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }
// ['6Mgqbai3fKo','k4YRWT_Aldo', '1YRW1QRKTBc', 'wuCK-oiE3rM']
      //stackoverflow avec video
      var videos =[];
      <% @tracks.each do |track|  %>
      videos.push('<%="#{track.youtubeid}"%>');
      <% end %>
      var index = 0;

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.cueVideoById({
          videoId: videos[index],

        });
        event.target.playVideo();
        if (index == 0){
          index++;
        }
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      ;
      function onPlayerStateChange(event) {
        if (event.data === YT.PlayerState.ENDED) {
          console.log(index);
          if (index <= videos.length - 1) {

            event.target.loadVideoById({
              videoId: videos[index],
            });
            index++;
        }
    }
}

    </script>
  </body>
</html>
